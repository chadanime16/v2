function scrollToTop() {
  let scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
  if (scrollTop > 0) {
    window.requestAnimationFrame(scrollToTop);
    window.scrollTo(0, scrollTop - scrollTop / 8);
  }
}

const htmlBody = document.querySelector("html, body");
const results = document.querySelector("#results");

function scrollToResults() {
  let resultsOffset = results.offsetTop;
  htmlBody.scrollTo({ top: resultsOffset, behavior: "smooth" });
}

const searchInput = document.getElementById("search-input");
const searchButton = document.getElementById("search-button");
const resultsContainer = document.getElementById("results");
const corsProxy = "https://chadcinema.chadcinema.workers.dev/?";

function optimisedImageUrl(imageUrl) {
  return imageUrl.replace("._V1_.", "._V1_QL75_UX160_.");
}

function fetchAndShow() {
  let query = encodeURIComponent(searchInput.value);
  let apiUrl = `${corsProxy}https://v3.sg.media-imdb.com/suggestion/x/${query}.json`;

  Pace.restart();
  fetch(apiUrl)
    .then(response => response.json())
    .then(data => {
      let resultsData = data.d;
      resultsContainer.innerHTML = "";

      resultsData.forEach(item => {
        if (item.i && (item.qid === "movie" || item.qid === "tvSeries")) {
          let resultItem = document.createElement("div");
          resultItem.classList.add("result");
          resultItem.setAttribute("IMDB", item.id);

          let resultContent = "";
          if (item.qid === "movie" && item.i) {
            resultContent = `
              <a onClick="setUrl(this); return setVideo(this);" 
                 url="imdb=${item.id}&type=movie&title=${item.l.replace(/ /g, "_")}" 
                 isWebSeries="false" 
                 title="${item.l}" 
                 class="links" 
                 IMDB="${item.id}" 
                 href="https://vidsrc.to/embed/movie/${item.id}" 
                 target="_blank">
                <img alt="${item.l}" src="${optimisedImageUrl(item.i.imageUrl)}">
                <div class="info">
                  <h3>${item.l}</h3>
                  <p>${item.s}</p>
                </div>
              </a>`;
          } else if (item.qid === "tvSeries" && item.i) {
            resultContent = `
              <a onClick="setUrl(this); return setVideo(this);" 
                 url="imdb=${item.id}&season=1&episode=1&title=${item.l.replace(/ /g, "_")}" 
                 IMDB="${item.id}" 
                 title="${item.l}" 
                 isWebSeries="true" 
                 class="links" 
                 href="https://vidsrc.to/embed/tv/${item.id}&season=1&episode=1" 
                 target="_blank">
                <img alt="${item.l}" src="${optimisedImageUrl(item.i.imageUrl)}">
                <div class="info">
                  <h3>${item.l}</h3>
                  <p>${item.s}</p>
                </div>
              </a>`;
          }
          resultItem.innerHTML = resultContent;
          resultsContainer.appendChild(resultItem);
        }
      });
    })
    .catch(error => console.error(error));
}

function setAll(id, title, season, episode, isWebSeries) {
  if (id && title && !season && !episode && isWebSeries) {
    let link = document.createElement("a");
    link.setAttribute("onClick", "setUrl(this); return setVideo(this);");
    link.setAttribute("url", `imdb=${id}&type=movie&title=${title.replace(/ /g, "_")}`);
    link.setAttribute("isWebSeries", "false");
    link.setAttribute("title", title);
    link.setAttribute("class", "links");
    link.setAttribute("IMDB", id);
    link.setAttribute("href", `https://vidsrc.to/embed/tv/${id}`);
    link.setAttribute("target", "_blank");
    link.click();
  } else if (id && title && season && episode && !isWebSeries) {
    let link = document.createElement("a");
    link.setAttribute("onClick", "setUrl(this); return setVideo(this);");
    console.log("season setall", season, "episode", episode);
    link.setAttribute("url", `${id}/${season}/${episode}`);
    link.setAttribute("isWebSeries", "true");
    link.setAttribute("title", title);
    link.setAttribute("class", "links");
    link.setAttribute("IMDB", id);
    link.setAttribute("href", `https://vidsrc.to/embed/tv/${id}/${season}/${episode}`);
    link.setAttribute("target", "_blank");
    link.click();
  }
}

async function fetchTitle(query) {
  let apiUrl = `${corsProxy}https://v3.sg.media-imdb.com/suggestion/x/${query}.json`;
  try {
    let response = await fetch(apiUrl);
    let data = await response.json();
    return data.d[0].l;
  } catch (error) {
    console.error(error);
  }
}

function setUrl(link) {
  let url = link.getAttribute("url");
  window.history.replaceState({}, "", `?${url.replace(/%20/g, "+")}`);
}

function fillSearchInput() {
  let params = new URLSearchParams(window.location.search);
  let searchQuery = params.get("search");
  let season = params.get("season");
  let episode = params.get("episode");
  let imdbId = params.get("imdb");
  let type = params.get("type");

  if (!searchQuery || (season && episode) || !imdbId || (type && !searchQuery && !episode && !season)) {
    if (imdbId && !searchQuery && episode && season) {
      console.log("season", season, "episode", episode);
      fetchTitle(imdbId)
        .then(title => setAll(imdbId, title, season, episode, type))
        .catch(error => console.error(error));
      console.log("season", season, "episode", episode);
    } else if (imdbId && !searchQuery && episode && season) {
      console.log("season", season, "episode", episode);
      fetchTitle(imdbId)
        .then(title => setAll(imdbId, title, season, episode, type))
        .catch(error => console.error(error));
      console.log("season", season, "episode", episode);
    } else if (imdbId && !searchQuery && !episode && !season) {
      fetchTitle(imdbId)
        .then(title => setAll(imdbId, title, season, episode, type))
        .catch(error => console.error(error));
    }
  } else {
    searchQuery = searchQuery.replace(/\+/g, "%20");
    let searchInputField = document.querySelector("#search-input");
    searchInputField.value = searchQuery;
    fetchAndShow();
  }
}

function updateURL(input) {
  let value = input.value;
  if (value) {
    window.history.replaceState({}, "", `?search=${encodeURIComponent(value).replace(/%20/g, "+")}`);
  } else {
    window.history.replaceState({}, "", window.location.pathname);
  }
}

function highlightCards() {
  let imdbId = new URLSearchParams(window.location.search).get("imdb");
  try {
    document.querySelectorAll(".result").forEach(result => {
      result.className = "result";
    });
    document.querySelector(`div[IMDB=${imdbId}]`).className = "result hoverClass";
  } catch (error) {
    console.error(error);
  }
}

fillSearchInput();

window.onpopstate = function () {
  let params = new URLSearchParams(window.location.search);
  let searchQuery = params.get("search");
  let imdbId = params.get("imdb");

  if (searchQuery || imdbId) {
    let infoElements = document.getElementsByClassName("information");
    for (let i = 0; i < infoElements.length; i++) {
      infoElements[i].style.display = "none";
    }
  } else {
    let infoElements = document.getElementsByClassName("information");
    for (let i = 0; i < infoElements.length; i++) {
      infoElements[i].style.display = "block";
    }
  }
};

let timer;

function episodeHighlight(defaultValue = "s1e1") {
  document.querySelectorAll(".episodes").forEach(episode => {
    episode.className = "episodes";
  });
  document.querySelector(`.episodes[cssidentification='${defaultValue}']`).className = "episodes selected";
}

function setVideo(link) {
  let iframe = document.getElementById("iframe");
  let videoContainer = document.getElementById("video");
  iframe.src = link.getAttribute("href");
  videoContainer.style.display = "block";

  let webSeriesData = document.getElementById("webSeriesData");
  let apiKey = "b6b677eb7d4ec17f700e3d4dfc31d005";
  let imdbId = link.getAttribute("IMDB");

  if (Pace.restart()) {
    scrollToTop();
  }
  window.dispatchEvent(new PopStateEvent("popstate"));

  if (link.getAttribute("isWebSeries") === "true") {
    async function getSeriesData() {
      let response = await fetch(`https://api.themoviedb.org/3/find/${imdbId}?api_key=${apiKey}&language=en-US&external_source=imdb_id`);
      let data = await response.json();
      let seriesId = data.tv_results[0].id;

      let seriesResponse = await fetch(`https://api.themoviedb.org/3/tv/${seriesId}?api_key=${apiKey}&language=en-US`);
      let seriesData = await seriesResponse.json();
      let numberOfSeasons = seriesData.number_of_seasons;

      webSeriesData.innerHTML += "<h2>Seasons:</h2>";
      for (let i = 1; i <= numberOfSeasons; i++) {
        webSeriesData.innerHTML += `<h3>Season ${i}:</h3><br>`;
        let seasonContainer = document.createElement("div");
        seasonContainer.classList.add("episode-container");
        let episodesHtml = "";
        let seasonResponse = await fetch(`https://api.themoviedb.org/3/tv/${seriesId}/season/${i}?api_key=${apiKey}&language=en-US`);
        let seasonData = await seasonResponse.json();

        for (let episode of seasonData.episodes) {
          let episodeNumber = episode.episode_number;
          let formattedEpisodeNumber = episodeNumber.toLocaleString("en-US", { minimumIntegerDigits: 2, useGrouping: false });
          episodesHtml += `
            <a class="episodes" 
               title="${seriesData.name}: E${formattedEpisodeNumber}. ${episode.name}" 
               cssidentification="s${i}e${episodeNumber}" 
               url="imdb=${imdbId}&season=${i}&episode=${episodeNumber}&title=${seriesData.name.replace(/ /g, "_")}_E${formattedEpisodeNumber}_${episode.name.replace(/ /g, "_")}" 
               onClick="event.preventDefault();setVideo(this);setUrl(this); " 
               href="https://vidsrc.to/embed/tv/${imdbId}/${i}/${episodeNumber}">
              E${formattedEpisodeNumber}. ${episode.name}
            </a>`;
        }
        seasonContainer.innerHTML = episodesHtml;
        webSeriesData.appendChild(seasonContainer);
        episodeHighlight();
      }
    }
    webSeriesData.innerHTML = "";
    getSeriesData();
  }
}



initializeAnalytics();
highlightCards();
